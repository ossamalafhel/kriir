name: 🛡️ KRIIR CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Backend tests
  backend-tests:
    name: 🏗️ Backend Tests & Build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.4-alpine
        env:
          POSTGRES_PASSWORD: kriir
          POSTGRES_USER: kriir
          POSTGRES_DB: kriir_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🧪 Run backend tests
      working-directory: ./api
      run: |
        ./mvnw clean test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/kriir_test
        SPRING_DATASOURCE_USERNAME: kriir
        SPRING_DATASOURCE_PASSWORD: kriir

    - name: 📊 Generate test coverage
      working-directory: ./api
      run: ./mvnw jacoco:report

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api/target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage

    - name: 🏗️ Build JAR
      working-directory: ./api
      run: ./mvnw clean package -DskipTests

    - name: 📦 Upload backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: api/target/*.jar

  # Frontend tests
  frontend-tests:
    name: 🎨 Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './dashboard/package-lock.json'

    - name: 📦 Install dependencies
      working-directory: ./dashboard
      run: npm ci

    - name: 🧪 Run frontend tests
      working-directory: ./dashboard
      run: npm test -- --coverage --watchAll=false

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./dashboard/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: 🏗️ Build frontend
      working-directory: ./dashboard
      run: npm run build

    - name: 📦 Upload frontend artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: dashboard/build/

  # Security scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📈 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: java, javascript

  # Docker build and push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download backend artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: api/target/

    - name: 📦 Download frontend artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dashboard/build/

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/kriir-api:latest
          ghcr.io/${{ github.repository }}/kriir-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./dashboard
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/kriir-dashboard:latest
          ghcr.io/${{ github.repository }}/kriir-dashboard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from test-runner
        docker-compose -f docker-compose.test.yml down

    - name: 📊 Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  # Release
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Generate release tag
      id: tag
      run: |
        TAG=v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Simple changelog from commits since last release
        CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | head -20)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🚀 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: KRIIR ${{ steps.tag.outputs.tag }}
        body: |
          ## What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          - API: `ghcr.io/${{ github.repository }}/kriir-api:${{ github.sha }}`
          - Dashboard: `ghcr.io/${{ github.repository }}/kriir-dashboard:${{ github.sha }}`
          
          ## Quick Start
          ```bash
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}/kriir-api:${{ github.sha }}
          docker run -p 3000:3000 ghcr.io/${{ github.repository }}/kriir-dashboard:${{ github.sha }}
          ```
        draft: false
        prerelease: false